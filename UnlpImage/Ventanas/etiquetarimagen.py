import ast
import io
import os
import PySimpleGUI as sg
from PIL import Image
import csv
from datetime import datetime
from ..Clases.Usuario import Usuario as User
from ..Clases.log import a침adir_log as AL

#imports vitales para q funque
#En la l칤nea 249 aprox est치 el thumbnail,pod칠s cambiar libremente el n칰mero por si la im치gen es muy grande o muy chica游녨
path_absoluto = os.path.abspath(os.path.dirname(__file__))
#print(path_absoluto)
path_absoluto = os.path.abspath(os.path.dirname(path_absoluto))
#print(path_absoluto)
path_absoluto = os.path.join(path_absoluto,"Assets") #Esto termina con el path en Assets,carpeta donde est치n los CSV,entre otras cosas
#print(path_absoluto)  #No s칠 si path absoluto es un buen nombre,es el path hasta Assets,donde est치n los csv
#path_completo = os.path.join(path_absoluto, path_superrelativo)

def modificar_tags (elim,ruta):
    """
    Esta funci칩n modifica los tags de la ruta que le das. Lo que hace es tratar de eliminar la posici칩n que le das (los par치metros que recibe)
    """
    with open(os.path.join(path_absoluto,'metadata.csv'), 'r+', newline='',encoding="UTF-8") as archivo_csv:   
                lector_csv = csv.reader(archivo_csv)
                contenido_csv = list(lector_csv)
                for i, sublist in enumerate(contenido_csv): 
                    if ruta in sublist:                  
                        posicion = i
                        datos_imagen_original = sublist  
                        break
                tags = datos_imagen_original[7]
                elementos = tags.split(',')
                #print("print de prueba lista")
                #print(tags_lista)
                if elim < len(elementos):
                    elementos.pop(elim)  # Eliminar el elemento en la posici칩n indicada
                else:
                    sg.popup('Est치 intentando eliminar una posici칩n inv치lida')
                elementos2=",".join(elementos)
                tags_actualizado = elementos2 
                #print("print de prueba2 tags lista actualizada")
                #print(tags_actualizado)
                datos_imagen_original[7] = tags_actualizado
                contenido_csv[posicion] = datos_imagen_original

                archivo_csv.seek(0)  # Regresar al inicio del archivo
                escritor_csv = csv.writer(archivo_csv)
                escritor_csv.writerows(contenido_csv)
                archivo_csv.truncate()  # Truncar el archivo para eliminar el contenido adicional si es necesario


def agarrar_Tags(ruta):
    """
    Esta funci칩n agarra los tags de la im치gen desde el CSV y los devuelve en una variable
    """
    with open(os.path.join(path_absoluto,'metadata.csv'), 'r+', newline='',encoding="UTF-8") as archivo_csv:   #una copia de mi m칩dulo que buscaba
        lector_csv = csv.reader(archivo_csv)                                                                   #la imagen en el csv y le칤a lo que ten칤a
        contenido_csv = list(lector_csv)                                                                       #bueno,ahora parecido,solo que lo guardo en una variable
        for i, sublist in enumerate(contenido_csv): 
            if ruta in sublist:                  
                posicion = i
                datos_imagen_original = sublist  
                break
        tags_str = datos_imagen_original[7]#Sacado de chatGPT,por fin me tir칩 una buena...
        print(f"se va a imprimir tags_str: {tags_str}") #y es algo b치sico que viene inclu칤do en python
    return tags_str

def path_csv():
    """
    Esta funci칩n lee lo que tiene el CSV en la primera l칤nea,para saber cual es el directorio de im치genes
    """
    with open (os.path.join(path_absoluto,'configuracionCSV.csv'), 'r' ,newline='',encoding="UTF-8") as archivo_csv:
        lector_csv = csv.reader(archivo_csv)
        contenido_csv = list(lector_csv)
        route = contenido_csv[1][0]
        print('ruta:')
        print(route)
    return route 

def obtener_fecha():
    """
    Obtiene la fecha del instante en el que se ejecuta,para guardar
    la 칰ltima modificaci칩n en el csv
    """
    timestamp = datetime.timestamp(datetime.now())
    fecha = int(timestamp)
    return fecha

"""
            path_csv = os.path.join(path_absoluto, "metadata.csv") Esto antes exist칤a,pero despu칠s de 
            revisar como van a evaluar el programa,trat칠 de reducir la cantidad de variables globales 
            todo lo posible. Estos eran prints de prueba para testear
            print('absoluto') print(path_absoluto) print('relativo') print(path_relativo)         
            print('completo') print(path_completo) print('pathcsv')  print(path_csv)                                    
"""       
        
def buscar_imagen(ruta):
    """
    Esta funci칩n abre el archivo metadata,en modo lectura
    lo pasamos a una lista y usamos el m치gico comando que
    le copie a la profe donde la lista es ennumerada, y 
    creamos una sublista que tiene los contenidos de los
    renglones que estamos leyendo. B치sicamente obtuvimos
    el archivo en una lista. Conseguimos la l칤nea que 
    quer칤amos leer,la transformamos en una lista,y de 
    ah칤 sacamos manualmente cada metadato
    """
    
    with open(os.path.join(path_absoluto,'metadata.csv'), 'r', newline='',encoding="UTF-8") as archivo_csv: 
        datos_imagen_original = None    #Esto es un parche que cubre un caso que por alg칰n motivo no deber칤a pasar,pero puede pasar(?)
        lector_csv = csv.reader(archivo_csv)
        contenido_csv = list(lector_csv)
        for i, sublist in enumerate(contenido_csv):  
            if ruta in sublist:                  
                datos_imagen_original = sublist
                break
        if datos_imagen_original:
            res = str(datos_imagen_original[4])+ "x" + str(datos_imagen_original[3])
            size = datos_imagen_original[5]
            mimetype = datos_imagen_original[6]
            descrip = datos_imagen_original[8]
            etiqs = datos_imagen_original[7]
        else:
            res = ''
            size = ''
            mimetype = ''
            descrip = ''
            etiqs = []

        return res,size,mimetype,descrip,etiqs
  

def actualizar_archivo(ruta,desc,res,size,type,tags,fecha,User):
    """
    Esta funci칩n recibe de par치metros la metadata,que previamente
    se obtuvo de el csv con la funci칩n "buscar_imagen".

    Abre el archivo de modo lectura,lo pasamos a una lista
    y usamos el m치gico comando que le copie a la profe donde
    la lista es ennumerada,y creamos una sublista que tiene
    los contenidos de los renglones que estamos leyendo
    terminamos el bucle con la lista a modificar (posicion)
    y una lista de sus contenidos,para cambiar cada uno manualmente.

    Luego,escribe nom치s
    """

    with open(os.path.join(path_absoluto,'metadata.csv'), 'r+', newline='',encoding="UTF-8") as archivo_csv:   
        lector_csv = csv.reader(archivo_csv)
        contenido_csv = list(lector_csv)
        for i, sublist in enumerate(contenido_csv): 
            if ruta in sublist:                  
                posicion = i
                datos_imagen_original = sublist  
                break
        datos_imagen_original[8] = desc
        datos_imagen_original[7] = tags
        datos_imagen_original[0] = fecha
        datos_imagen_original[1] = User
        contenido_csv[posicion]=datos_imagen_original
    with open(os.path.join(path_absoluto,'metadata.csv'), 'w',newline='',encoding="UTF-8") as archivo_csv:
        escritor_csv = csv.writer(archivo_csv)
        escritor_csv.writerows(contenido_csv)     


def existe_imagen(img):   
    """
    Esta funci칩n une el path absoluto,con el nombre del
    archivo (metadata) y revisa si existe la imagen ese lugar.
    
    Tiene una excepci칩n para la primera vez que se ejecuta el programa
    (cuando no deber칤a haber un archivo,y habr칤a error).Ah칤 crea el archivo
    y le da unos encabezados para la primera l칤nea.
    """
    b=False
    try:
        with open(os.path.join(path_absoluto, "metadata.csv"), 'r+',encoding="UTF-8") as arch:    
            reader = csv.reader(arch)
            for linea in reader:
                if linea[2] == img:  #Si lo que est치 en la l칤nea 0 (La ruta) coincide con la ruta de la imagen
                    #print("EXISTE")
                    b=True
            #if not b:
                #print("NO EXISTE")
    except FileNotFoundError:           
            print('No existe el archivo csv')
            with open(os.path.join(path_absoluto, "metadata.csv"), 'w+', newline='',encoding="UTF-8") as archivo: 
                escritor = csv.writer(archivo)
                escritor.writerow(['time','Nick','imagen','alto','ancho','tama침o','tipo','tags','des'])
    finally:
        print("se va a imprimir b") #esto para probar/debuggear
        print(b)
        return b
"""
Esta funci칩n daba error la primera vez siempre,porque iba a querer revisar el csv que no exist칤a
Por lo que entend칤,tenemos que permitir que el programa cree el csv si no existe,por eso us칠 w+ en la otra funci칩n
Entonces esto cubre el primer caso,de la primera im치gen,donde no existe csv que revisar :)
"""

def guardar_nueva_imagen(path,desc,res,size,type,tags,fecha,User):
    """
    Esta funci칩n recibe de par치metros la metadata sacada de la im치gen,
    y los junta en una variable "todojunto" para m치s c칩modidad
    Recordar que esta es una funci칩n para agregar una imagen que no estaba 
    previamente en el archivo,por lo que se usa append
    """
    resolucion = res
    width,height = map(int,resolucion.split("x"))
    todojunto = [fecha,User,path,height,width,size,type,tags,desc]
    
    with open(os.path.join(path_absoluto, "metadata.csv"),'a',newline='',encoding="UTF-8") as archivo:
        escritor = csv.writer(archivo)
        escritor.writerow(todojunto)

def encontrar_ruta(filename):
    """
    Esta funci칩n junta los paths para 
    conseguir la carpeta de la im치gen le칤da,
    m치s el nombre de la im치gen
    """
    path_de_la_imagen=os.path.basename(filename) #Obtengo el nombre del archivo solo,separado
    carpeta_contenedora = os.path.dirname(filename) #Obtengo la ruta de la carpeta que contiene el archivo
    print('contenedora')
    print(carpeta_contenedora)
    nombre_carpeta = os.path.basename(carpeta_contenedora) #Obtengo el nombre de la carpeta
    print('nombrecarpeta')
    print(nombre_carpeta)
    nombre_assets = os.path.dirname(carpeta_contenedora)
    print('nombre_assets')
    print(nombre_assets)
    nombre_assets = os.path.basename(nombre_assets)
    print('nombre_assets')
    print(nombre_assets)
    path_a_mostrar=os.path.join(nombre_assets,nombre_carpeta,path_de_la_imagen) #Los junto a ambos para tener carpeta + archivo
    ruta = path_a_mostrar #Variable a devolver
    return ruta



def layout():
    """
    No creo que haga falta explicar lo que hace esta funci칩n,simplemente es un layout,un poco feo,pero es lo que hay
    """
    if os.path.exists(os.path.join(path_absoluto,'configuracionCSV.csv')):
        csv = path_csv()
    else:
        csv = ''
    title = [[sg.Text('Etiquetar im치genes', font=("Helvetica", 18), justification="left"), sg.Push(), sg.Button('Volver',key='-SALIR-', font= ("Helvetica", 18))]]

    layout = [[sg.Text("Seleccione la im치gen")],
              [sg.Input(size=(25, 1), key="-IMAGEN-"),sg.FileBrowse('Seleccionar',initial_folder=csv),sg.Button('Aceptar')], #si no le pon칤a un bot칩n para "aceptar procesar la imagen"
              [sg.Image(key='-IMAGE-', size=(200,200),data='')]]  # imagen vac칤a                          #no hab칤a chance que me lo detecte como un evento,para poder
            # Nueva secci칩n para mostrar la metadata,se llama layout2 porque soy muy original                                                                                          #actualizar la im치gen m치s adelante,quiz치 es tosco,pero funca
    layout2 = [[sg.Text("Informaci칩n de la imagen:",key="-info-de-la-img-",visible=False)], 
              [sg.Text("Nombre:",key="-nom-",visible=False), sg.Text(size=(20,1), key='-NOMBRE-DEL-ARCHIVO-',visible=False)],
              [sg.Text("Ruta:",key="-path-",visible=False), sg.Text(size=(20,1), key='-PATH-DEL-ARCHIVO-',visible=False)],
              [sg.Text("Tama침o:",key="-size-",visible=False), sg.Text(size=(20,1), key='-TAMA칌O-',visible=False)],
              [sg.Text("Resoluci칩n:",key="-res-",visible=False), sg.Text(size=(20,1), key='-RESOLUCION-',visible=False)],
              [sg.Text("Tipo:",key="-type-",visible=False), sg.Text(size=(20,1), key='-MIMETYPE-',visible=False)],

              [sg.Text("Tags:",key="-etiquetas-",visible=False), sg.Text(size=(35,1), key='-ETIQUETAS-',visible=False)],
              [sg.Text("Ingrese posici칩n a eliminar(Arranca en 0)",key="-elim_tags-",visible=False)],
              [sg.Input(size=(5, 1), key="-ELIM_TAGS-",visible=False),sg.Button('Aceptar',key="Acep3",visible=False)],

              [sg.Text("Ingrese etiquetas(Agregar nuevos tags de uno a la vez)",key="-tags-",visible=False)],
              [sg.Input(size=(35, 1), key="-TAGS-",visible=False),sg.Button('Aceptar',key="Acep1",visible=False)],
              

              [sg.Text("Desc:",key="-Descrip-",visible=False), sg.Text(size=(35,1), key='-descrip-',visible=False)],
              [sg.Text("Ingrese descripci칩n",key="-desc-",visible=False)],
              [sg.Input(size=(35, 1), key="-DESC-",visible=False),sg.Button('Aceptar',key="Acep2",visible=False)],
              
              ]                                                                                               
    subtitle = [[sg.Text(''), sg.Push(),sg.VPush()], #De esta manera guardar queda abajo a la derecha como yo lo quiero     
                [sg.Push(),sg.Button('Guardar',key='-GUARDAR-',font=("Helvetica",16))]]    
                #Este uso de los layouts est치 copiado de mi ventana anterior igual(configuraci칩n)
    return [[title],
            [sg.Column(layout,justification="center")], 
            [sg.Column(layout2,justification="center")],#esto est치 hecho una columna
            [subtitle]]
            
def run():
    """
    Literalmente es todo el programa,con el bucle principal
    """

    window = sg.Window('Configurar Etiquetas', layout(),finalize=True, resizable=True)    
    window.set_min_size((600,400))         

    while True:
        event, values = window.read()
        print(event, values)
        if event == sg.WIN_CLOSED or event == '-SALIR-':
            break
        if event == 'Aceptar':
            filename=values['-IMAGEN-'] #creo una variable que va a tener los valores(el directorio de la imagen)
            try:    
                if not os.path.exists(filename):#si no existe en el directorio este archivo que queremos abrir:
                    raise ValueError(f'El archivo "{filename}" no existe')  
                if os.path.splitext(filename)[1] not in ('.png', '.jpg', '.jpeg'): # esto separa el path de la extensi칩n
                    raise ValueError('Debe seleccionar un archivo de imagen v치lido (PNG/JPG/JPEG') 
                                                                                         
                image = Image.open(values["-IMAGEN-"]) #la variable imagen va a abrir la imagen,con el tama침o del thumbnail
                image.thumbnail((150, 150))            #que si entend칤 bien,lo que hace thumbnail es mantener la relacion de aspecto
                bio = io.BytesIO()   #se guardan los bytes de la imagen
                image.save(bio, format="PNG")    #esto complementa la instrucci칩n anterior. Me acabo de dar cuenta que transforma la im치gen a png,aunque solo para mostrarla
                window["-IMAGE-"].update(data=bio.getvalue()) #y le pasamos la data a la ventana imagen para que se actualize con estos bytes
                                                              #mostrando as칤,la im치gen
                ruta = encontrar_ruta(filename) #Si no extraigo la ruta de la imagen misma,no tengo forma de buscarlo en el csv
                existe = existe_imagen(ruta)  #Reviso si la im치gen est치 en el csv
                print(existe)
                #Hacer aparecer los strings invisibles que van a dar la info de la imagen
                window["-info-de-la-img-"].update(visible=True), window["-nom-"].update(visible=True)
                window["-path-"].update(visible=True), window["-size-"].update(visible=True)
                window["-res-"].update(visible=True), window["-type-"].update(visible=True)
                window["-tags-"].update(visible=True), window["-TAGS-"].update(visible=True)
                window["Acep1"].update(visible=True), window["-desc-"].update(visible=True)
                window["-DESC-"].update(visible=True), window["Acep2"].update(visible=True)
                window["-etiquetas-"].update(visible=True), window["-Descrip-"].update(visible=True)
                if not existe: 
                    #print("No existe")
                    """
                    Si la imagen no existe en el csv,la mostramos de esta manera,extrayendo los metadatos de la im치gen directamente.
                    Estas variables son para hacer lo de abajo,actualizar la info de los objetos de texto del layout.
                    """
                    res = str(image.width) + 'x' + str(image.height)
                    size = f"{round(os.path.getsize(filename)/1024, 1)}KB"
                    mimetype = image.format_description
                    descrip = "No tiene"
                    etiqs = "No tiene"
                    
                    """
                    Ten칤a entendido que las variables de ac치 arriba,yo pod칤a simplemente asignarle el valor de las etiquetas que est치n aca abajo,pero cuando
                    lo hice,siempre tiraban keyerror o alg칰n otro error,no entend칤 por qu칠,tengo entendido que puedo asignarle a una variable "values['etiqueta']"
                    y de hecho est치 hecho m치s arriba para la im치gen,pero ac치 no quiso funcionar as칤 que lo hice variables aparte nom치s
                    """
                    #Actualizar la informaci칩n de la imagen 
                    window["-descrip-"].update(value=descrip,visible=True),window["-TAMA칌O-"].update(value=size, visible=True)
                    window["-ETIQUETAS-"].update(value=etiqs,visible=True),window["-RESOLUCION-"].update(value=res,visible=True)
                    window["-NOMBRE-DEL-ARCHIVO-"].update(value=os.path.basename(filename),visible=True),window["-PATH-DEL-ARCHIVO-"].update(value=ruta,visible=True)
                    window["-MIMETYPE-"].update(value=mimetype,visible=True)     
                    """
                    Todos estos comandos los saqu칠 de internet,es para conseguir la info exif;
                    Si no hac칤a a todos los objetos invisibles,y despu칠s los hac칤a visibles devuelta
                    Los objetos que no hubiera cambiado,hubieran cambiado de lugar con los otros. 
                    Parece que la visibilidad de los objetos est치 vinculada al "espacio" que ocupan en la gui
                    Osea,la visibilidad no es una caracter칤stica aislada,m치s bien desaparece al objeto totalmente
                    As칤 que hice invisible todo hasta que no hiciera falta,un quilombo lo admito
                    """
                else:
                    #print("Existe")
                    res,size,mimetype,descrip,etiqs = buscar_imagen(ruta)
                    print(res),print(size),print(mimetype),print(descrip),print(etiqs)
    
                    window["-descrip-"].update(value=descrip,visible=True),window["-TAMA칌O-"].update(value=size, visible=True)
                    window["-ETIQUETAS-"].update(value=etiqs,visible=True),window["-RESOLUCION-"].update(value=res,visible=True)
                    window["-NOMBRE-DEL-ARCHIVO-"].update(value=os.path.basename(filename),visible=True),window["-PATH-DEL-ARCHIVO-"].update(value=ruta,visible=True)
                    window["-MIMETYPE-"].update(value=mimetype,visible=True) ,window["-elim_tags-"].update(visible=True) 
                    window["-ELIM_TAGS-"].update(visible=True) ,window["Acep3"].update(visible=True)
            except ValueError as e:
                sg.popup_error(str(e)) #Esto transforma en string el par치metro e,que es una variable que  almacena 
                                       #informaci칩n sobre la excepci칩n, como su tipo y un mensaje de error asociado.
        if event == 'Acep3':
            elim = int(values["-ELIM_TAGS-"])
            
            modificar_tags(elim,ruta)

            res,size,mimetype,descrip,etiqs = buscar_imagen(ruta)
            window["-ETIQUETAS-"].update(value=etiqs,visible=True) 
        if event == 'Acep1':
            tag = values["-TAGS-"]
        if event == 'Acep2':
            desc = values["-DESC-"]
        if event == '-GUARDAR-':

            existe = existe_imagen(ruta) #Si no repito este chequeo ac치,podr칤as agregar por error 
            fecha = obtener_fecha() #m칰ltiples veces una im치gen la primera vez que la ingreses
            try:      
                if not existe:  
                    tags=""   #Se crea una lista vac칤a,y se le append-ea el tag reci칠n le칤do
                    tags="".join(tag)
                    print(f"se va a imprimir {tags}")
                    print("guardar_nueva_imagen")
                    guardar_nueva_imagen(ruta,desc,res,size,mimetype,tags,fecha,User.alias)
                    AL(User.alias,'new_image',fecha)
                    #Una vez guardado,vamos a buscar denuevo la data de la imagen al CSV,ahora tiene que estar si o s칤,y actualizamos descripci칩n y etiquetas :)
                    res,size,mimetype,descrip,etiqs = buscar_imagen(ruta)
                    window["-descrip-"].update(value=descrip,visible=True)
                    window["-ETIQUETAS-"].update(value=etiqs,visible=True)  
                    window["-elim_tags-"].update(visible=True) 
                    window["-ELIM_TAGS-"].update(visible=True) ,window["Acep3"].update(visible=True)
                else:
                    #print(f"se va a imprimir el tag a agregar {tag}")
                    tags=agarrar_Tags(ruta) #Esto agarra los tags
                    #print(f"se va a imprimir agarrar tags {tags}")
                    if tags:
                        tags+=f",{tag}" #Y esto los agrega,total es una cadena de string
                    else:
                        tags+=tag
                    #print(f"se va a imprimir tags {tags}")
                    print("actualizar_archivo")
                    actualizar_archivo(ruta,desc,res,size,mimetype,tags,fecha,User.alias)
                    AL(User.alias,'edit_image',fecha)
                    #lo mismo que arriba
                    res,size,mimetype,descrip,etiqs = buscar_imagen(ruta)
                    window["-descrip-"].update(value=descrip,visible=True)
                    window["-ETIQUETAS-"].update(value=etiqs,visible=True) 
                sg.popup('춰Im치gen guardada correctamente!')
            except UnboundLocalError as e:
                sg.popup('No ingreso tags o descripci칩n')
            


    window.close()
